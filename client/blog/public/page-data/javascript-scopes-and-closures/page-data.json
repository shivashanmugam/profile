{"componentChunkName":"component---src-templates-post-js","path":"/javascript-scopes-and-closures","result":{"data":{"site":{"siteMetadata":{"title":"Blog üè°","description":"This is where they post things!","author":{"name":"Siva Kannan"},"keywords":["Video Blogger"]}},"mdx":{"frontmatter":{"title":"Scopes and Closures, Javascript","date":"June 15, 2017","author":null,"banner":null,"slug":"javascript-scopes-and-closures","keywords":["js"]},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"javascript-scopes-and-closures\",\n  \"date\": \"2017-06-15T00:00:00.000Z\",\n  \"title\": \"Scopes and Closures, Javascript\",\n  \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed molestie leo ut sodales porta. Vivamus pharetra risus ac fermentum faucibus. Nam in sodales ex.\",\n  \"published\": true,\n  \"categories\": [\"js\"],\n  \"keywords\": [\"js\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Scopes & Closures\"), mdx(\"h3\", null, \"Scope\"), mdx(\"p\", null, \"If a variable or function is accissible it is in the scope of execution context\\nThere are three scopes\\n- Local Scope\\n- Clousure Scope\\n- Global Scope\"), mdx(\"h3\", null, \"Closure Scope\"), mdx(\"p\", null, \"Simple closure\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function pam() {\\n    var name = \\\"Pam Beesly\\\";\\n    function setName(newName) {\\n        name = newName; //Here name variable is accessible through global scope\\n    }\\n    function displayName(){\\n        console.log(name)\\n    }\\n    setName(\\\"Pam Halpert\\\");\\n}\\npam();\\n\")), mdx(\"p\", null, \"Closure scope from a returned function\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function makeWorker() {\\n  let name = \\\"Pete\\\";\\n\\n  return function() {\\n    alert(name); //when this getting executed the variable `name` will be available in closure scope\\n  };\\n}\\n\\nlet name = \\\"John\\\";\\n\\n// create a function\\nlet work = makeWorker();\\n\\n// call it\\nwork();\\n\")), mdx(\"h3\", null, \"closure usecases\"), mdx(\"p\", null, \"Closures used to create factory functions\\nAnd closures are core of functional programming\"), mdx(\"h4\", null, \"Function factories\"), mdx(\"p\", null, \"There are many ways to create a object,\\nObject.create, {} (Object literal), new Object, and factory function\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function Employee(designation){\\n    var dbAccess;\\n    if(designation == 'prject manager'){\\n        dbAccess = true;\\n    }else{\\n        dbAccess = false;\\n    }\\n    return function(name){\\n        console.log(`${name} the ${designation} and dbAccess ${dbAccess}`);\\n    }\\n}\\nvar projectManager = Employee('project manager');\\nvar ram = projectManager('Ram'); //Ram the manager and dbAccess true\\nvar juniorDeveloper = Employee('Junior Developer');\\nvar siva = juniorDeveloper('Siva') //Siva the Junior Developer and dbAccess false\\n\")), mdx(\"h3\", null, \"Callbacks\"), mdx(\"p\", null, \"Whenever IO request or Settimeout callback is executing the callback uses Closure scope to access the variables outside it's local scope.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"let name = \\\"Siva\\\"\\nsettimeout(function(){\\n    console.log(name) //name is accessed through closure scope here\\n}, 2000)\\n\")), mdx(\"h3\", null, \"Find out the answer ( Test )\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let deck = {\\n    suits: [\\\"hearts\\\", \\\"spades\\\", \\\"clubs\\\", \\\"diamonds\\\"],\\n    cards: Array(52),\\n    createCardPicker: function() {\\n        return function() {\\n            let pickedCard = Math.floor(Math.random() * 52);\\n            let pickedSuit = Math.floor(pickedCard / 13);\\n\\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\\n        }\\n    }\\n}\\n\\nlet cardPicker = deck.createCardPicker();\\nlet pickedCard = cardPicker();\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.typescriptlang.org/docs/handbook/functions.html#this-and-arrow-functions\"\n  }), \"Answer and explnation\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"197bf971-40e7-5f59-bf23-275913bc8afe","prev":{"id":"196b5e4c-c318-54b3-94bd-ea1bccd1c148","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Generator Function They‚Äôre especially good for working with multiple asynchronous steps Before we see fully about generator function let's understand a scenario why and when we need a generator function Pseduo Scenario We need to get first ninja's‚Ä¶","fields":{"title":"Generator Function, Javascript","slug":"demo-02","date":"2018-01-01T00:00:00.000Z"}},"next":null}}}