{"componentChunkName":"component---src-templates-post-js","path":"/generator-function","result":{"data":{"site":{"siteMetadata":{"title":"Blog üè°","description":"This is where they post things!","author":{"name":"Siva Kannan"},"keywords":["Video Blogger"]}},"mdx":{"frontmatter":{"title":"Generator Function Javascript","date":"January 01, 2018","author":null,"banner":null,"slug":"generator-function","keywords":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"generator-function\",\n  \"date\": \"2018-01-01T00:00:00.000Z\",\n  \"title\": \"Generator Function Javascript\",\n  \"description\": \"Generator function in javascript, What is it, Working mechanism, Why we need it ? Multiple use cases\",\n  \"published\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Generator Function\"), mdx(\"p\", null, \"They\\u2019re especially good for working with multiple asynchronous steps\"), mdx(\"p\", null, \"Before we see fully about generator function let's understand a scenario why and when we need a generator function\"), mdx(\"h3\", null, \"Pseduo Scenario\"), mdx(\"p\", null, \"We need to get first ninja's mission details, The below pseduo code has a psedo syncGetJSON ( a non-existing syncronouse function to read a JSON file).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"try {\\n   var ninjas = syncGetJSON(\\\"ninjas.json\\\");\\n   var missions = syncGetJSON(ninjas[0].missionsUrl);\\n   var missionDetails = syncGetJSON(missions[0].detailsUrl);\\n   //Study the mission description\\n}\\ncatch(e){\\n  //Oh no, we weren't able to get the mission details\\n}\\n\")), mdx(\"p\", null, \"Javascript cannot be blocked as it is single threaded.\"), mdx(\"h3\", null, \"Let see actual Implementation of the Psedo-scenario in javascript\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"getJSON(\\\"ninjas.json\\\", function(err, ninjas){\\n  if(err) {\\n    console.log(\\\"Error fetching list of ninjas\\\", err);\\n    return;\\n  }\\n  getJSON(ninjas[0].missionsUrl, function(err, missions) {\\n    if(err) {\\n      console.log(\\\"Error locating ninja missions\\\", err);\\n      return;\\n    }\\n  getJSON(missions[0].detailsUrl, function(err, missionDetails){\\n    if(err) {\\n      console.log(\\\"Error locating mission details\\\", err);\\n      return;\\n    }\\n    //Study the intel plan\\n    });\\n  });\\n});\\n\")), mdx(\"p\", null, \"This code creates a callback hell and it's difficult to understand straight forward.\"), mdx(\"h3\", null, \"Generator Function\"), mdx(\"p\", null, \"It is defined by putting a asterick right after the function  keyword.\"), mdx(\"p\", null, \"We can also use the yield keywords in generator function\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"async (function *(){\\ntry{\\n    const ninjas = yield getJSON(\\\"ninjas.json\\\");\\n    const missions = yield getJSON(ninjas[0].missionsUrl);\\n    const missionDescription = yield(missions[0].detailsUrl);\\n}\\ncatch(e){\\n    //oh no, we were't able to get the mission details.\\n}\\n})\\n\")), mdx(\"h4\", null, \"The theory definition\"), mdx(\"p\", null, \"A generator is a function that generates a sequence of values, but not all at once, as a standard function would, but on a per request basis. \"), mdx(\"p\", null, \"We have to explicitly ask the generator for a new value, and the generator will either respond with a value or notify us that it has no more values to produce.\"), mdx(\"p\", null, \"after a value is produced, a generator function doesn\\u2019t end its execution, as a normal function would. Instead, a generator is merely suspended.\"), mdx(\"h4\", null, \"the example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function WeaponGenerator(){\\n    yield \\\"Katana\\\";\\n    yield \\\"Wakizashi\\\";\\n    yield \\\"Kasarigama\\\";\\n    \\n}\\n\")), mdx(\"h4\", null, \"Consuming WeaponGenerator Example 1\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript=\"\n  }), \"for(let weapon of WeaponGenerator()) {\\n  assert(weapon, weapon);\\n}\\n\")), mdx(\"h4\", null, \"Controlling generator function through iterator object\"), mdx(\"p\", null, \"Making a call to a generator doesn\\u2019t mean that the body of the generator function will be executed. Instead, an iterator object is created, an object through which we can communicate with the generator\"), mdx(\"p\", null, \"See the below self explainable image\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/J8uTEPu.png\",\n    \"alt\": null\n  }))), mdx(\"h4\", null, \"Generator function and while loop\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/8RgxZti.png\",\n    \"alt\": null\n  }))), mdx(\"h4\", null, \"Generator function delegation\"), mdx(\"p\", null, \"By using the yield* operator on an iterator\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/ACgx3nN.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"\\\"Sun Tzu\\\"\\n\\\"Hattori\\\"\\n\\\"Yoshi\\\"\\n\\\"Genghis Khan\\\"\\n\")), mdx(\"h3\", null, \"Use case 1 ( Generating Unique Identifiers Using Generator Function)\"), mdx(\"h4\", null, \"requirement\"), mdx(\"p\", null, \"When creating certain objects, often we need to assign a unique ID to each object.\"), mdx(\"h4\", null, \"The normal way\"), mdx(\"p\", null, \"The easiest way to do this is through a global counter variable\"), mdx(\"h4\", null, \"The problem in the normal way\"), mdx(\"p\", null, \"that\\u2019s kind of ugly because the variable can be accidently messed up from anywhere in our code. \"), mdx(\"h4\", null, \"The generator way\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function *idGenerator(){\\n    var i = 1;\\n    while(1){\\n        yield i++;\\n    }\\n}\\n\\nvar idIterator = idGenerator();\\nconst ninja1 = { 'id' : idIterator.next().value } // {id:1}\\nconst ninja1 = { 'id' : idIterator.next().value } // {id:2}\\nconst ninja1 = { 'id' : idIterator.next().value } // {id:3}\\n\")), mdx(\"h4\", null, \"The closure Way\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function idGeneratorConstructor(){\\n    var id = 1;\\n    return function(){\\n        return id++;\\n    }\\n}\\nvar idGenerator = idGeneratorConstructor();\\nconst ninja1 = { 'id' : idGenerator() } // {id:1}\\nconst ninja1 = { 'id' : idGenerator() } // {id:2}\\nconst ninja1 = { 'id' : idGenerator() } // {id:3}\\n\")), mdx(\"h3\", null, \"Use case 2 - ( DOM Traversal )\"), mdx(\"p\", null, \"The general way\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/XWJspRQ.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Understand the DOM Traversal and make it better using Generator functions.\\nDONT SEE THE ANSWER\\n.\\n.\\n.\\n.\\n.\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/HsltF51.png\",\n    \"alt\": null\n  }))), mdx(\"h2\", null, \"Communicating with generator Function\"), mdx(\"p\", null, \"So far we have seen generator returning multiple values.\"), mdx(\"h3\", null, \"Two Way communication\"), mdx(\"p\", null, \"We can also send data to a genarator, there by acheiving two way communication.\"), mdx(\"p\", null, \"A example to understand it\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/WtXXQfw.png\",\n    \"alt\": null\n  }))), mdx(\"h4\", null, \"Throwing exceptions into generator in two way communication\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/hkPE5r2.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"Instead of calling next with iterator, just need to call iterator.throw()\"), mdx(\"h3\", null, \"Exploring Generators under the Hood\"), mdx(\"p\", null, \"Like promise generator also has multiple execution states\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Suspended start\\nGenerator is created, But no code Executed\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Executing\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Executing\\nCode of the generator is getting executed either from start or from last suspended state.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Suspended yield\\nWhen a generator reaches yield expression it creates a object carring the return value and suspends the execution. \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Completed\\nIf the generator returns or runs out of code to execute, it moves to completed state.\"))), mdx(\"p\", null, \"A diagram expalining the states of execution.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/Wgg9QSj.png\",\n    \"alt\": null\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"196b5e4c-c318-54b3-94bd-ea1bccd1c148","prev":{"id":"fd3e98ec-27a6-5568-ac1b-28cbf3cabe71","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Design Patterns There‚Äôs been a ton of articles on design patterns. This article emphasis more on why should we use it first of all in programming. What is design pattern ? There is a lot of ways to write code for a single solution. But some ways has‚Ä¶","fields":{"title":"Design pattern","slug":"design-pattern","date":"2019-05-07T00:00:00.000Z"}},"next":{"id":"197bf971-40e7-5f59-bf23-275913bc8afe","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Scopes & Closures Scope If a variable or function is accissible it is in the scope of execution context\nThere are three scopes\n\t- Local Scope\n\t- Clousure Scope\n\t- Global Scope Closure Scope Simple closure Closure scope from a returned function‚Ä¶","fields":{"title":"Scopes and Closures, Javascript","slug":"javascript-scopes-and-closures","date":"2017-06-15T00:00:00.000Z"}}}}}